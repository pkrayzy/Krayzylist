// ==UserScript==
// @name         YouTube
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Disable YouTube ads and prune ad-related data on youtube.com, youtubekids.com, youtube-nocookie.com, and m.youtube.com
// @author       AI Assistant
// @match        *://www.youtube.com/*
// @match        *://youtube.com/*
// @match        *://m.youtube.com/*
// @match        *://youtubekids.com/*
// @match        *://youtube-nocookie.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    /* =========================================================================
       Helper: setConstant
       – Given a dot-separated property (like "ytInitialPlayerResponse.playerAds"),
         wait until its parent exists and lock its value by defining a getter.
       Usage Example:
         setConstant("ytInitialPlayerResponse.playerAds", undefined);
    ========================================================================= */
    function setConstant(propertyPath, constantValue) {
        const parts = propertyPath.split('.');
        function tryDefine() {
            let obj = window;
            for (let i = 0; i < parts.length - 1; i++) {
                if (typeof obj[parts[i]] === 'undefined') return false;
                obj = obj[parts[i]];
            }
            try {
                Object.defineProperty(obj, parts[parts.length - 1], {
                    get: function() { return constantValue; },
                    set: function(_) {},
                    configurable: false,
                    enumerable: true
                });
            } catch (e) {
                // Ignore errors if property not configurable.
            }
            return true;
        }
        if (!tryDefine()) {
            const interval = setInterval(() => {
                if (tryDefine()) clearInterval(interval);
            }, 50);
            setTimeout(() => clearInterval(interval), 10000);
        }
    }

    // -------------------------------------------------------------------------
    // Apply set-constant rules for youtube.com, youtubekids.com, youtube-nocookie.com
    // -------------------------------------------------------------------------
    setConstant("ytInitialPlayerResponse.playerAds", undefined);
    setConstant("ytInitialPlayerResponse.adPlacements", undefined);
    setConstant("ytInitialPlayerResponse.adSlots", undefined);
    setConstant("playerResponse.adPlacements", undefined);

    /* =========================================================================
       Helper: adjustSetTimeout
       – Wraps setTimeout so that when the callback’s source contains a given string
         (here, "[native code]") and the delay exactly equals targetDelay, the delay
         is multiplied by the given multiplier.
       Usage Example:
         adjustSetTimeout("[native code]", 17000, 0.001);
    ========================================================================= */
    function adjustSetTimeout(searchStr, targetDelay, multiplier) {
        const originalSetTimeout = window.setTimeout;
        window.setTimeout = function(callback, delay, ...args) {
            if (typeof callback === 'function' &&
                callback.toString().indexOf(searchStr) !== -1 &&
                Number(delay) === Number(targetDelay))
            {
                delay = delay * multiplier;
            }
            return originalSetTimeout(callback, delay, ...args);
        };
    }

    // -------------------------------------------------------------------------
    // Apply adjust-setTimeout on www.youtube.com
    // -------------------------------------------------------------------------
    if (window.location.hostname === "www.youtube.com") {
        adjustSetTimeout("[native code]", 17000, 0.001);
    }

    /* =========================================================================
       Helper: jsonPruneKeys
       – Removes properties from an object given a space‐separated list of dot-
         notation key paths. Supports "[]" as a wildcard for array elements.
    ========================================================================= */
    function pruneObjByPath(obj, path) {
        const parts = path.split('.');
        function rec(o, index) {
            if (o == null) return;
            if (index >= parts.length) return;
            const part = parts[index];
            if (part === "[]") {
                if (Array.isArray(o)) {
                    o.forEach(elem => rec(elem, index + 1));
                }
            } else {
                if (index === parts.length - 1) {
                    if (o && Object.prototype.hasOwnProperty.call(o, part)) {
                        delete o[part];
                    }
                } else {
                    if (o && typeof o === 'object' && o[part] !== undefined) {
                        rec(o[part], index + 1);
                    }
                }
            }
        }
        rec(obj, 0);
    }

    function jsonPruneKeys(obj, keysStr) {
        const keys = keysStr.split(/\s+/);
        keys.forEach(keyPath => {
            if (keyPath) {
                pruneObjByPath(obj, keyPath);
            }
        });
    }

    /* =========================================================================
       Helper: interceptFetchResponse
       – Wraps window.fetch so that if the request URL matches a provided regex,
         the response text (if JSON) is modified by modifyCallback.
    ========================================================================= */
    function interceptFetchResponse(modifyCallback, urlRegex) {
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            let requestUrl = "";
            if (typeof args[0] === "string") {
                requestUrl = args[0];
            } else if (args[0] instanceof Request) {
                requestUrl = args[0].url;
            }
            if (urlRegex.test(requestUrl)) {
                return originalFetch(...args).then(response => {
                    const ct = response.headers.get("content-type") || "";
                    if (ct.indexOf("application/json") !== -1 ||
                        ct.indexOf("text") !== -1) {
                        return response.clone().text().then(text => {
                            try {
                                let obj = JSON.parse(text);
                                let modifiedText = modifyCallback(obj);
                                return new Response(modifiedText, {
                                    status: response.status,
                                    statusText: response.statusText,
                                    headers: response.headers
                                });
                            } catch (e) {
                                console.error("Fetch JSON prune error:", e);
                                return response;
                            }
                        });
                    }
                    return response;
                });
            }
            return originalFetch(...args);
        };
    }

    /* =========================================================================
       Helper: interceptXHRResponse
       – Similar to interceptFetchResponse, but for XMLHttpRequest responses.
    ========================================================================= */
    function interceptXHRResponse(modifyCallback, urlRegex) {
        const originalOpen = XMLHttpRequest.prototype.open;
        XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
            this._xhrUrl = url;
            return originalOpen.call(this, method, url, async, user, password);
        };

        const originalSend = XMLHttpRequest.prototype.send;
        XMLHttpRequest.prototype.send = function(body) {
            if (this._xhrUrl && urlRegex.test(this._xhrUrl)) {
                const self = this;
                const originalOnReadyStateChange = self.onreadystatechange;
                self.onreadystatechange = function() {
                    if (self.readyState === 4) {
                        const ct = self.getResponseHeader("content-type") || "";
                        if ((ct.indexOf("application/json") !== -1 ||
                             ct.indexOf("text") !== -1) && self.responseText) {
                            try {
                                let obj = JSON.parse(self.responseText);
                                let modifiedText = modifyCallback(obj);
                                Object.defineProperty(self, "responseText", {
                                    get: () => modifiedText,
                                    configurable: true
                                });
                                Object.defineProperty(self, "response", {
                                    get: () => modifiedText,
                                    configurable: true
                                });
                            } catch (e) {
                                console.error("XHR JSON prune error:", e);
                            }
                        }
                    }
                    if (originalOnReadyStateChange) {
                        return originalOnReadyStateChange.apply(this, arguments);
                    }
                };
            }
            return originalSend.call(this, body);
        };
    }

    /* =========================================================================
       Apply json-prune-fetch-response rules on www.youtube.com
    ========================================================================= */
    // Rule: For URL matching /playlist?/, remove these keys:
    interceptFetchResponse(function(obj) {
        jsonPruneKeys(obj, "playerAds adPlacements adSlots playerResponse.playerAds playerResponse.adPlacements playerResponse.adSlots");
        return JSON.stringify(obj);
    }, /playlist\?/);

    // Rule: For URL matching /player?/, remove these keys (including array wildcards):
    interceptFetchResponse(function(obj) {
        jsonPruneKeys(obj, "playerAds adPlacements adSlots playerResponse.playerAds playerResponse.adPlacements playerResponse.adSlots [].playerResponse.adPlacements [].playerResponse.playerAds [].playerResponse.adSlots");
        return JSON.stringify(obj);
    }, /player\?/);

    /* =========================================================================
       Apply json-prune-xhr-response rule on www.youtube.com
    ========================================================================= */
    interceptXHRResponse(function(obj) {
        jsonPruneKeys(obj, "playerAds adPlacements adSlots playerResponse.playerAds playerResponse.adPlacements playerResponse.adSlots [].playerResponse.adPlacements [].playerResponse.playerAds [].playerResponse.adSlots");
        return JSON.stringify(obj);
    }, /\/player(?:\?.+)?$/);

    /* =========================================================================
       Apply json-prune rule on m.youtube.com, music.youtube.com,
       youtubekids.com and youtube-nocookie.com.
       This overrides JSON.parse so that any JSON object parsed will have these
       ad-related keys removed.
    ========================================================================= */
    if (/^(m\.youtube\.com|music\.youtube\.com|youtubekids\.com|youtube-nocookie\.com)$/i.test(window.location.hostname)) {
        const originalJSONParse = JSON.parse;
        JSON.parse = function(text, reviver) {
            let data = originalJSONParse(text, reviver);
            try {
                jsonPruneKeys(data, "playerResponse.adPlacements playerResponse.playerAds playerResponse.adSlots adPlacements playerAds adSlots important");
            } catch (e) {
                // Ignore any errors.
            }
            return data;
        };
    }

    /* =========================================================================
       Final set-constant rule on www.youtube.com:
       Set yt.config_.EXPERIMENT_FLAGS.web_bind_fetch to false.
    ========================================================================= */
    if (window.location.hostname === "www.youtube.com") {
        setConstant("yt.config_.EXPERIMENT_FLAGS.web_bind_fetch", false);
    }

    /* -------------------------------------------------------------------------
   1. Iframe fetch/Request proxy: If a newly appended node is an iframe with
      src "about:blank", copy window.fetch and window.Request to its contentWindow.
------------------------------------------------------------------------- */
(() => {
    const handler = {
        apply: (target, thisArg, args) => {
            const appended = Reflect.apply(target, thisArg, args);
            try {
                if (
                    appended instanceof HTMLIFrameElement &&
                    appended.src === "about:blank" &&
                    appended.contentWindow
                ) {
                    appended.contentWindow.fetch = window.fetch;
                    appended.contentWindow.Request = window.Request;
                }
            } catch (error) {
                console.error("Iframe proxy error:", error);
            }
            return appended;
        }
    };
    Node.prototype.appendChild = new Proxy(Node.prototype.appendChild, handler);
})();

/* -------------------------------------------------------------------------
   2. Promise.then patch: Intercept then() calls and if the first callback's
      source includes "onAbnormalityDetected", replace it with an empty function.
------------------------------------------------------------------------- */
(() => {
    const promiseHandler = {
        apply: (target, thisArg, args) => {
            const cb = args[0];
            if (typeof cb === "function" && cb.toString().includes("onAbnormalityDetected")) {
                args[0] = function() {};
            }
            return Reflect.apply(target, thisArg, args);
        }
    };
    window.Promise.prototype.then = new Proxy(window.Promise.prototype.then, promiseHandler);
})();

/* -------------------------------------------------------------------------
   3. Array.push patch for ssap entity tracking and video correction.
      – Monitors push calls on Array.prototype to record ssap entries.
      – On DOMContentLoaded with the proper YouTube config flag set, it
        checks for a video element; if the video's duration matches the
        last recorded entry’s end (in seconds) and its currentTime is behind the
        entry’s start time, it seeks to that start time.
------------------------------------------------------------------------- */
(() => {
    let currentUrl = document.location.href,
        ssapEntries = [],
        ssapIDs = [],
        idString = "",
        locked = false;
    const pushMethod = Array.prototype.push;
    const pushHandler = {
        apply: (target, thisArg, args) => {
            if (
                window.yt?.config_?.EXPERIMENT_FLAGS?.html5_enable_ssap_entity_id &&
                args[0] &&
                args[0] !== window &&
                typeof args[0].start === "number" &&
                args[0].end &&
                args[0].namespace === "ssap" &&
                args[0].id
            ) {
                // If not locked and the first ssap isn't valid, clear the arrays then lock.
                if (!(locked || args[0]?.start !== 0 || ssapIDs.includes(args[0].id))) {
                    ssapEntries.length = 0;
                    ssapIDs.length = 0;
                    locked = true;
                    pushMethod.call(ssapEntries, args[0]);
                    pushMethod.call(ssapIDs, args[0].id);
                }
                // When locked, record new ssap entry if not already recorded.
                if (locked && args[0]?.start !== 0 && !ssapIDs.includes(args[0].id)) {
                    pushMethod.call(ssapEntries, args[0]);
                    pushMethod.call(ssapIDs, args[0].id);
                }
            }
            return Reflect.apply(target, thisArg, args);
        }
    };
    window.Array.prototype.push = new Proxy(window.Array.prototype.push, pushHandler);

    document.addEventListener("DOMContentLoaded", () => {
        if (!window.yt?.config_?.EXPERIMENT_FLAGS?.html5_enable_ssap_entity_id) return;
        const checkVideo = () => {
            const video = document.querySelector("video");
            if (video && ssapEntries.length > 0) {
                const dur = Math.round(video.duration),
                      lastEnd = Math.round(ssapEntries.at(-1).end / 1e3),
                      idJoin = ssapIDs.join(",");
                if (video.loop === false && idString !== idJoin && dur && dur === lastEnd) {
                    const startSec = ssapEntries.at(-1).start / 1e3;
                    if (video.currentTime < startSec) {
                        video.currentTime = startSec;
                        locked = false;
                        idString = idJoin;
                    }
                } else if (video.loop === true && dur && dur === lastEnd) {
                    const startSec = ssapEntries.at(-1).start / 1e3;
                    if (video.currentTime < startSec) {
                        video.currentTime = startSec;
                        locked = false;
                        idString = idJoin;
                    }
                }
            }
        };
        checkVideo();
        new MutationObserver(() => {
            if (currentUrl !== document.location.href) {
                currentUrl = document.location.href;
                ssapEntries.length = 0;
                ssapIDs.length = 0;
                locked = false;
            }
            checkVideo();
        }).observe(document, { childList: true, subtree: true });
    });
})();

/* -------------------------------------------------------------------------
   4. JSON.parse patch for /shorts/ pages:
      – Wraps JSON.parse so that when parsing JSON on URLs starting with "/shorts/"
        it filters out any entries (in the returned object’s "entries" array)
        which have a truthy isAd flag at 
        r.command.reelWatchEndpoint.adClientParams.isAd.
------------------------------------------------------------------------- */
(() => {
    window.JSON.parse = new Proxy(JSON.parse, {
        apply(target, thisArg, args) {
            const data = Reflect.apply(target, thisArg, args);
            if (!location.pathname.startsWith("/shorts/")) return data;
            const arr = data?.entries;
            if (arr && Array.isArray(arr)) {
                data.entries = arr.filter(entry => {
                    // Return entry only if the isAd flag is not truthy.
                    return !(entry?.command?.reelWatchEndpoint?.adClientParams?.isAd);
                });
            }
            return data;
        }
    });
})();
    
})(); 